/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"displayers": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./vue/src/displayers/main.js","chunk-vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./vue/src/displayers/main.js":
/*!************************************!*\
  !*** ./vue/src/displayers/main.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./node_modules/core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! ./node_modules/core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n\n__webpack_require__(/*! ./node_modules/core-js/modules/es.object.assign.js */ \"./node_modules/core-js/modules/es.object.assign.js\");\n\n__webpack_require__(/*! ./node_modules/core-js/modules/es.promise.finally.js */ \"./node_modules/core-js/modules/es.promise.finally.js\");\n\nwindow.displayersOptionComponents = {};\nwindow.displayersOptionComponents['entry_rendered'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field;\n\n      return (_this$errors$field = this.errors[field]) !== null && _this$errors$field !== void 0 ? _this$errors$field : [];\n    }\n  },\n  created: function created() {\n    console.log(this.displayer.viewModes);\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\" v-for=\\\"elem, typeUid in displayer.viewModes\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('View mode for {type}', {type: elem.type}) }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select :name=\\\"'viewModes['+typeUid+']'\\\" :value=\\\"options.viewModes[typeUid]\\\">\\n                        <option v-for=\\\"label, uid in elem.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('viewMode-'+typeUid)\\\">\\n                <li v-for=\\\"error in errorList('viewMode-'+typeUid)\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['category_rendered'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field2;\n\n      return (_this$errors$field2 = this.errors[field]) !== null && _this$errors$field2 !== void 0 ? _this$errors$field2 : [];\n    }\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('View mode') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select name=\\\"viewMode\\\" :value=\\\"options.viewMode\\\">\\n                        <option v-for=\\\"label, uid in displayer.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('viewMode')\\\">\\n                <li v-for=\\\"error in errorList('viewMode')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['asset_rendered'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field3;\n\n      return (_this$errors$field3 = this.errors[field]) !== null && _this$errors$field3 !== void 0 ? _this$errors$field3 : [];\n    }\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\" v-for=\\\"elem, volumeUid in displayer.viewModes\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('View mode for volume {volume}', {volume: elem.label}) }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select :name=\\\"'viewModes['+volumeUid+']'\\\" :value=\\\"options.viewModes[volumeUid]\\\">\\n                        <option v-for=\\\"label, uid in elem.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('viewMode-'+volumeUid)\\\">\\n                <li v-for=\\\"error in errorList('viewMode-'+volumeUid)\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['url_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field4;\n\n      return (_this$errors$field4 = this.errors[field]) !== null && _this$errors$field4 !== void 0 ? _this$errors$field4 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Open in new tab') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.newTab}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"newTab\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['time_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      format: 'd/m/Y H:i:s',\n      custom: ''\n    };\n  },\n  created: function created() {\n    format: this.options.format;\n\n    custom: this.options.custom;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field5;\n\n      return (_this$errors$field5 = this.errors[field]) !== null && _this$errors$field5 !== void 0 ? _this$errors$field5 : [];\n    }\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Format') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select name=\\\"format\\\" v-model=\\\"format\\\">\\n                        <option value=\\\"H:i:s\\\">{{ t('Full : 13:25:36') }}</option>\\n                        <option value=\\\"H:iY\\\">{{ t('Without seconds : 13:25') }}</option>\\n                        <option value=\\\"custom\\\">{{ t('Custom') }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('format')\\\">\\n                <li v-for=\\\"error in errorList('format')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\" v-if=\\\"format == 'custom'\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n            </div>\\n            <div class=\\\"instructions\\\">\\n                <p><span v-html=\\\"t('View available formats')\\\"></span> <a href=\\\"https://www.php.net/manual/fr/datetime.format.php\\\" target=\\\"_blank\\\">{{ t('here') }}</a></p>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"custom\\\" v-model=\\\"custom\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('custom')\\\">\\n                <li v-for=\\\"error in errorList('custom')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['redactor_trimmed'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      truncated: null,\n      ellipsis: null\n    };\n  },\n  created: function created() {\n    this.truncated = this.options.truncated;\n    this.ellipsis = this.options.ellipsis;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field6;\n\n      return (_this$errors$field6 = this.errors[field]) !== null && _this$errors$field6 !== void 0 ? _this$errors$field6 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this2.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Truncated') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"number\\\" class=\\\"fullwidth text\\\" name=\\\"truncated\\\" v-model=\\\"truncated\\\" min=\\\"1\\\" :placeholder=\\\"t('Character limit')\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('truncated')\\\">\\n                <li v-for=\\\"error in errorList('truncated')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Ellipsis') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"ellipsis\\\" v-model=\\\"ellipsis\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('ellipsis')\\\">\\n                <li v-for=\\\"error in errorList('ellipsis')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Link ellipsis to entry') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.linked}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"linked\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['redactor_full'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this3.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Strip HTML tags') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.stripped}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"stripped\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['plain_text_trimmed'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      truncated: null,\n      ellipsis: null\n    };\n  },\n  created: function created() {\n    this.truncated = this.options.truncated;\n    this.ellipsis = this.options.ellipsis;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field7;\n\n      return (_this$errors$field7 = this.errors[field]) !== null && _this$errors$field7 !== void 0 ? _this$errors$field7 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this4.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Truncated') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"number\\\" class=\\\"fullwidth text\\\" name=\\\"truncated\\\" v-model=\\\"truncated\\\" min=\\\"1\\\" :placeholder=\\\"t('Character limit')\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('truncated')\\\">\\n                <li v-for=\\\"error in errorList('truncated')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Ellipsis') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"ellipsis\\\" v-model=\\\"ellipsis\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('ellipsis')\\\">\\n                <li v-for=\\\"error in errorList('ellipsis')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Link ellipsis to entry') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.linked}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"linked\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['number_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      decimals: 0\n    };\n  },\n  created: function created() {\n    this.decimals = this.options.decimals;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field8;\n\n      return (_this$errors$field8 = this.errors[field]) !== null && _this$errors$field8 !== void 0 ? _this$errors$field8 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this5.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Decimals') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"decimals\\\" v-model=\\\"decimals\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('decimals')\\\">\\n                <li v-for=\\\"error in errorList('decimals')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Show prefix') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.showPrefix}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"showPrefix\\\">\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Show suffix') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.showSuffix}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"showSuffix\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['entry_link'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      label: 'title',\n      custom: '',\n      newTab: false\n    };\n  },\n  created: function created() {\n    this.label = this.options.label;\n    this.custom = this.options.custom;\n    this.newTab = this.options.newTab;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field9;\n\n      return (_this$errors$field9 = this.errors[field]) !== null && _this$errors$field9 !== void 0 ? _this$errors$field9 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this6 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this6.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Label') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select name=\\\"label\\\" v-model=\\\"label\\\">\\n                        <option value=\\\"title\\\">{{ t('Entry title') }}</option>\\n                        <option value=\\\"custom\\\">{{ t('Custom') }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('label')\\\">\\n                <li v-for=\\\"error in errorList('label')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\" v-if=\\\"label == 'custom'\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"custom\\\" v-model=\\\"custom\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('custom')\\\">\\n                <li v-for=\\\"error in errorList('custom')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Open in new tab') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: newTab}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"newTab\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['date_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      format: 'd/m/Y H:i:s',\n      custom: ''\n    };\n  },\n  created: function created() {\n    format: this.options.format;\n\n    custom: this.options.custom;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field10;\n\n      return (_this$errors$field10 = this.errors[field]) !== null && _this$errors$field10 !== void 0 ? _this$errors$field10 : [];\n    }\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Format') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select name=\\\"format\\\" v-model=\\\"format\\\">\\n                        <option value=\\\"d/m/Y H:i:s\\\">{{ t('Full : 31/10/2005 13:25:13') }}</option>\\n                        <option value=\\\"d/m/Y\\\">{{ t('Date : 31/10/2005') }}</option>\\n                        <option value=\\\"H:i\\\">{{ t('Time : 13:25') }}</option>\\n                        <option value=\\\"custom\\\">{{ t('Custom') }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('format')\\\">\\n                <li v-for=\\\"error in errorList('format')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\" v-if=\\\"format == 'custom'\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n            </div>\\n            <div class=\\\"instructions\\\">\\n                <p><span v-html=\\\"t('View available formats')\\\"></span> <a href=\\\"https://www.php.net/manual/fr/datetime.format.php\\\" target=\\\"_blank\\\">{{ t('here') }}</a></p>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"custom\\\" v-model=\\\"custom\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('custom')\\\">\\n                <li v-for=\\\"error in errorList('custom')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['email_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  mounted: function mounted() {\n    var _this7 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this7.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Output as link') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: linked}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"linked\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['category_list'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  mounted: function mounted() {\n    var _this8 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this8.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Output as links') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: linked}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"linked\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['author_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  mounted: function mounted() {\n    var _this9 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this9.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Display first name') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: firstName}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"firstName\\\">\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Display last name') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: lastName}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"lastName\\\">\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Display email') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: email}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"email\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['asset_link'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  data: function data() {\n    return {\n      label: 'title',\n      custom: '',\n      newTab: false,\n      download: false\n    };\n  },\n  created: function created() {\n    this.label = this.options.label;\n    this.custom = this.options.custom;\n    this.newTab = this.options.newTab;\n    this.download = this.options.download;\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field11;\n\n      return (_this$errors$field11 = this.errors[field]) !== null && _this$errors$field11 !== void 0 ? _this$errors$field11 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this10 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this10.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Label') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select name=\\\"label\\\" v-model=\\\"label\\\">\\n                        <option value=\\\"title\\\">{{ t('Asset title') }}</option>\\n                        <option value=\\\"custom\\\">{{ t('Custom') }}</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('label')\\\">\\n                <li v-for=\\\"error in errorList('label')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\" v-if=\\\"label == 'custom'\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">\\n                <input type=\\\"text\\\" class=\\\"fullwidth text\\\" name=\\\"custom\\\" v-model=\\\"custom\\\">\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('custom')\\\">\\n                <li v-for=\\\"error in errorList('custom')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Open in new tab') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: newTab}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"newTab\\\">\\n                </button>\\n            </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Download link') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: download}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"download\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\nwindow.displayersOptionComponents['title_default'] = {\n  props: {\n    displayer: Object,\n    options: Object,\n    errors: Object\n  },\n  methods: {\n    errorList: function errorList(field) {\n      var _this$errors$field12;\n\n      return (_this$errors$field12 = this.errors[field]) !== null && _this$errors$field12 !== void 0 ? _this$errors$field12 : [];\n    }\n  },\n  mounted: function mounted() {\n    var _this11 = this;\n\n    this.$nextTick(function () {\n      Craft.initUiElements(_this11.$el);\n    });\n  },\n  template: \"\\n    <div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label class=\\\"required\\\">{{ t('Tag') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <div class=\\\"select\\\">\\n                    <select name=\\\"tag\\\" :value=\\\"options.tag\\\">\\n                        <option value=\\\"h1\\\">H1</option>\\n                        <option value=\\\"h2\\\">H2</option>\\n                        <option value=\\\"h3\\\">H3</option>\\n                        <option value=\\\"h4\\\">H4</option>\\n                        <option value=\\\"h5\\\">H5</option>\\n                        <option value=\\\"h6\\\">H6</option>\\n                    </select>\\n                </div>\\n            </div>\\n            <ul class=\\\"errors\\\" v-if=\\\"errorList('tag')\\\">\\n                <li v-for=\\\"error in errorList('tag')\\\">{{ error }}</li>\\n            </ul>\\n        </div>\\n        <div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label>{{ t('Link to Element') }}</label>\\n            </div>\\n            <div class=\\\"input ltr\\\">                    \\n                <button type=\\\"button\\\" :class=\\\"{lightswitch: true, on: options.linked}\\\">\\n                    <div class=\\\"lightswitch-container\\\">\\n                        <div class=\\\"handle\\\"></div>\\n                    </div>\\n                    <input type=\\\"hidden\\\" name=\\\"linked\\\">\\n                </button>\\n            </div>\\n        </div>\\n    </div>\"\n};\n\n//# sourceURL=webpack:///./vue/src/displayers/main.js?");

/***/ })

/******/ });