(function(){var e={4065:function(e,t,i){"use strict";i.r(t);var n=i(8081),a=i.n(n),s=i(3645),l=i.n(s),r=l()(a());r.push([e.id,'.themes-modal-options{padding-bottom:62px;min-width:300px!important;min-height:300px!important;height:60vh!important;width:30%!important}.themes-modal-options .body{height:calc(100% - 65px)}.themes-modal-options .field.select-elements .heading{display:flex;justify-content:space-between}.themes-modal-options.displayer-asset-renderfile,.themes-modal-options.displayer-file-file{width:50%!important;height:80vh!important}#field-displayers{position:relative;height:calc(100% - 2px);border-radius:3px;border:1px solid rgba(96,125,159,.25);background-clip:padding-box;overflow:hidden}#field-displayers:after{display:block;position:absolute;z-index:1;top:0;left:0;width:100%;height:100%;visibility:visible;content:"";font-size:0;border-radius:3px;box-shadow:inset 0 1px 3px -1px #acbed2;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.displayers-settings{height:100%;min-width:300px;overflow-y:auto;padding-left:200px;background:#fff;box-shadow:0 0 0 1px rgba(31,41,51,.1),0 2px 5px -2px rgba(31,41,51,.2)}.displayers-settings .settings-container{padding:15px}.displayers-sidebar{position:absolute;background-color:#f3f7fc;left:0;width:205px;height:100%;overflow-y:auto}.displayers-sidebar .heading{padding:7px 14px 6px;border-bottom:1px solid rgba(51,64,77,.1);background-color:#f3f7fc;background-image:linear-gradient(rgba(51,64,77,0),rgba(51,64,77,.05))}.displayers-sidebar .kind-item{display:flex;justify-content:space-between;padding:8px 14px;border-bottom:solid #cdd8e4;border-width:1px 0;background-color:#e4edf6}.displayers-sidebar .kind-item:hover{text-decoration:none}.displayers-sidebar .kind-item.sel{background-color:#cdd8e4}.displayers-sidebar .kind-item:last-child{border-bottom:none}.displayers-sidebar h4{margin-bottom:5px}',""]),t["default"]=r},7718:function(e,t,i){"use strict";var n={props:{definition:Object,errors:Array,name:String,classes:String},mounted(){this.$nextTick((()=>{Craft.initUiElements(this.$el)}))},template:'\n        <div :class="\'field \' + classes" :id="\'field-\' + name">\n            <slot name="heading">\n                <div class="heading" v-if="definition.label">\n                    <label :class="{required: definition.required ?? false}">{{ definition.label }}</label>\n                </div>\n            </slot>\n            <slot name="instructions">\n                <div class="instructions" v-if="definition.instructions" v-html="definition.instructions">\n                </div>\n            </slot>\n            <slot name="main">\n            </slot>\n            <slot name="tip">\n                <p v-if="definition.tip" class="notice with-icon" v-html="definition.tip">\n                </p>\n            </slot>\n            <slot name="warning">\n                <p v-if="definition.warning" class="warning with-icon" v-html="definition.warning">\n                </p>\n            </slot>\n            <slot name="errors">\n                <ul class="errors" v-if="errors">\n                    <li class="error" v-for="error, index in errors" v-bind:key="index">\n                        {{ error }}\n                    </li>\n                </ul>\n            </slot>\n        </div>'},a={computed:{inputClass(){return"input "+Craft.orientation}},props:{value:Boolean,definition:Object,errors:Array,name:String},mounted(){this.$nextTick((()=>{$(this.$el).find(".lightswitch").on("change",(e=>{this.$emit("change",$(e.target).hasClass("on"))}))}))},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div class="lightswitch-outer-container" v-if="definition.onLabel">\n                        <div class="lightswitch-inner-container">\n                            <span data-toggle="off" aria-hidden="true" v-if="definition.offLabel">{{ definition.offLabel }}</span>\n                            <button type="button" :class="{lightswitch: true, on: value}">\n                                <div class="lightswitch-container">\n                                    <div class="handle"></div>\n                                </div>\n                                <input type="hidden" :value="value ? 1 : \'\'">\n                            </button>\n                            <span data-toggle="off" aria-hidden="true" v-if="definition.onLabel">{{ definition.onLabel }}</span>\n                        </div>\n                    </div>\n                    <button v-if="!definition.onLabel" type="button" :class="{lightswitch: true, on: value}">\n                        <div class="lightswitch-container">\n                            <div class="handle"></div>\n                        </div>\n                        <input type="hidden" :value="value ? 1 : \'\'">\n                    </button>\n                </div>\n            </template>\n        </form-field>'},s={computed:{inputClass(){return"input "+Craft.orientation}},data:function(){return{realValue:{}}},created(){this.realValue=this.value},props:{value:String,definition:Object,errors:Array,name:String},watch:{realValue:function(){this.$emit("change",this.realValue)}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div class="select">\n                        <select v-model="realValue" :disabled="definition.disabled" :autofocus="definition.autofocus ?? false">\n                            <option v-for="label, value2 in definition.options ?? {}" :value="value2" v-bind:key="value2">{{ label }}</option>\n                        </select>\n                    </div>\n                </div>\n            </template>\n        </form-field>'},l={computed:{inputClass(){return"input "+Craft.orientation}},data:function(){return{realValue:{}}},props:{value:[Number,String],definition:Object,errors:Array,name:String},created(){this.realValue=this.value},watch:{realValue:function(){this.$emit("change",this.realValue)}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <input :class="{text: true, fullwidth: !definition.size}" :type="definition.type ?? \'text\'" v-model="realValue" :maxlength="definition.maxlength" :autofocus="definition.autofocus ?? false" :disabled="definition.disabled" :readonly="definition.readonly ?? false" :placeholder="definition.placeholder" :step="definition.step" :min="definition.min" :max="definition.max" :size="definition.size">\n                </div>\n            </template>\n        </form-field>'},r={computed:{inputClass(){return"input "+Craft.orientation}},props:{value:String,definition:Object,errors:Array,name:String},components:{"form-field":n},mounted(){this.$nextTick((()=>{$(this.$el).find("input.text").datepicker(Craft.datepickerOptions),$(this.$el).find("input.text").on("change",(()=>{this.$emit("change",$(this.$el).find("input.text").val())}))}))},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div class="datewrapper">\n                        <input type="text" class="text" :value="value" size="10" autocomplete="off" placeholder=" ">\n                        <div data-icon="date"></div>\n                    </div>\n                </div>\n            </template>\n        </form-field>'},o={computed:{inputClass(){return"input "+Craft.orientation}},data:function(){return{realValue:{}}},props:{value:String,definition:Object,errors:Array,name:String},components:{"form-field":n},mounted(){this.$nextTick((()=>{let e={minTime:this.definition.minTime??null,maxTime:this.definition.maxTime??null,disableTimeRanges:this.definition.disableTimeRanges??null,step:this.definition.minuteIncrement??5,forceRoundTime:this.definition.forceRoundTime??!1};e={...e,...Craft.timepickerOptions};let t=$(this.$el).find("input.text");t.timepicker(e),t.on("changeTime",(()=>{this.$emit("change",t.val())}))}))},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div class="timewrapper">\n                        <input type="text" class="text" :value="value" size="10" autocomplete="off" placeholder=" ">\n                        <div data-icon="time"></div>\n                    </div>\n                </div>\n            </template>\n        </form-field>'},d={props:{value:String,definition:Object,errors:Array,name:String},mounted(){this.$nextTick((()=>{new Craft.ColorInput($(this.$el).find(".color-container")),$(this.$el).find("input.color-preview-input").on("change",(()=>{this.$emit("change",$(this.$el).find("input.color-preview-input").val())}))}))},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div class="flex color-container">\n                    <div class="color static">\n                        <div class="color-preview" :style="value ? \'background-color:\' + value : \'\'"></div>\n                    </div>\n                    <input class="color-input text" type="text" size="10" :value="value">\n                </div>\n            </template>\n        </form-field>'},c={computed:{inputClass(){return"input "+Craft.orientation}},props:{value:String,definition:Object,errors:Array,name:String},components:{"form-field":n},mounted(){this.$nextTick((()=>{$(this.$el).find("input.date").datepicker(Craft.datepickerOptions),$(this.$el).find("input.date").on("change",(()=>{this.updateValue()}));let e={minTime:this.definition.minTime??null,maxTime:this.definition.maxTime??null,disableTimeRanges:this.definition.disableTimeRanges??null,step:this.definition.minuteIncrement??5,forceRoundTime:this.definition.forceRoundTime??!1};e={...e,...Craft.timepickerOptions};let t=$(this.$el).find("input.time");t.timepicker(e),t.on("changeTime",(()=>{this.updateValue()}))}))},methods:{updateValue(){let e=$(this.$el).find("input.date").val()+" "+$(this.$el).find("input.time").val();this.$emit("change",e)}},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div class="datetimewrapper">\n                        <div class="datewrapper">\n                            <input type="text" class="text date" :value="value ? value.split(\' \')[0] ?? \'\' : \'\'" size="10" autocomplete="off" placeholder=" ">\n                            <div data-icon="date"></div>\n                        </div>\n                        <div class="timewrapper">\n                            <input type="text" class="text time" :value="value ? value.split(\' \')[1] ?? \'\' : \'\'" size="10" autocomplete="off" placeholder=" ">\n                            <div data-icon="time"></div>\n                        </div>\n                    </div>\n                </div>\n            </template>\n        </form-field>'},u={computed:{inputClass(){return"input "+Craft.orientation}},data:function(){return{realValue:{}}},props:{value:String,definition:Object,errors:Array,name:String},created(){this.realValue=this.value},watch:{realValue:function(){this.$emit("change",this.realValue)}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <textarea :class="{text: true, fullwidth: !definition.cols}" :type="definition.type ?? \'text\'" v-model="realValue" :maxlength="definition.maxlength" :autofocus="definition.autofocus ?? false" :disabled="definition.disabled" :readonly="definition.readonly ?? false" :placeholder="definition.placeholder" :cols="definition.cols ?? 50" :rows="definition.rows ?? 2"></textarea>\n                </div>\n            </template>\n        </form-field>'},m={computed:{inputClass(){return"input "+Craft.orientation}},data:function(){return{realValue:{}}},created(){this.realValue=this.value},props:{value:String,definition:Object,errors:Array,name:String},watch:{realValue:function(){this.$emit("change",this.realValue)}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div class="multiselect">\n                        <select v-model="realValue" :disabled="definition.disabled" :autofocus="definition.autofocus ?? false" multiple>\n                            <option v-for="label, value2 in definition.options ?? {}" :value="value2" v-bind:key="value2">{{ label }}</option>\n                        </select>\n                    </div>\n                </div>\n            </template>\n        </form-field>'},p={computed:{inputClass(){return"input "+Craft.orientation}},props:{value:Array,definition:Object,errors:Array,name:String},data:function(){return{id:null}},created(){this.id=Math.floor(1e6*Math.random())},mounted(){$(this.$el).find("[type=checkbox]").on("change",(()=>{let e=[];$.each($(this.$el).find("[type=checkbox]"),(function(t,i){$(i).is(":checked")&&e.push($(i).val())})),this.$emit("change",e)}))},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <fieldset class="checkbox-group">\n                        <div v-for="label, cvalue in definition.options" v-bind:key="cvalue">\n                            <input type="checkbox" :checked="value.includes(cvalue)" class="checkbox" :value="cvalue" :id="id + \'-\' + cvalue" :disabled="definition.disabled">\n                            <label :for="id + \'-\' + cvalue">\n                                {{ label }}\n                            </label>\n                        </div>\n                    </fieldset>\n                </div>\n            </template>\n        </form-field>'},f={computed:{inputClass(){return"input "+Craft.orientation}},props:{value:String,definition:Object,errors:Array,name:String},watch:{value:function(){this.$emit("change",this.value)}},data:function(){return{id:null}},created(){this.id=Math.floor(1e6*Math.random())},mounted(){let e=this;$(this.$el).find("[type=radio]").on("change",(function(){e.$emit("change",$(this).val())}))},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <fieldset class="radio-group">\n                        <div v-for="rvalue, label in definition.options" v-bind:key="rvalue">\n                            <label>\n                                <input type="radio" :selected="rvalue == value" :value="rvalue" :disabled="definition.disabled" :name="name">\n                                {{ label }}\n                            </label>\n                        </div>\n                    </fieldset>\n                </div>\n            </template>\n        </form-field>'},h={computed:{inputClass(){return"input "+Craft.orientation}},data:function(){return{realValue:{},currentKind:null}},props:{value:Object,definition:Object,errors:Array,name:String},created(){let e;for(let t in this.definition.mapping)e=this.definition.mapping[t].displayers[0],this.value[t]?this.realValue[t]=this.value[t]:this.realValue[t]={},this.realValue[t].options||(this.realValue[t].options=e.options.defaultValues),this.realValue[t].displayer||(this.realValue[t].displayer=e.handle);this.currentKind=Object.keys(this.definition.mapping)[0]??null},watch:{realValue:{handler:function(){this.$emit("change",this.realValue)},deep:!0}},methods:{formFieldComponent(e){return"formfield-"+e},getErrors:function(e){for(let t in this.errors){let i=Object.keys(this.errors[t]);if((i[0]??null)==e)return this.errors[t][e]}return{}},hasErrors:function(e){return 0!=Object.keys(this.getErrors(e)).length},getDisplayer:function(e){if(!this.definition.mapping[e])return null;for(let t in this.definition.mapping[e].displayers){let i=this.definition.mapping[e].displayers[t];if(this.realValue[e].displayer==i.handle)return i}return null},getDisplayerName:function(e){let t=this.getDisplayer(e);return t?t.name:""},updateDisplayer:function(e,t){this.realValue[e]={displayer:t,options:this.getDisplayer(e).options.defaultValues}},updateOption:function(e,t,i){this.realValue[e].options[t]=i}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template #main>\n                <div class="displayers-sidebar">\n                    <div class="heading">\n                        <h5>{{ t(\'File Kinds\') }}</h5>\n                    </div>\n                    <a :class="{\'kind-item\': true, sel: currentKind == handle}" v-for="elem, handle in definition.mapping" v-bind:key="handle" @click.prevent="currentKind = handle">\n                        <div class="name">\n                            <h4>{{ elem.label }} <span class="error" data-icon="alert" aria-label="Error" v-if="hasErrors(handle)"></span></h4>\n                            <div class="smalltext light code" v-if="realValue[handle].displayer ?? null">\n                                {{ getDisplayerName(handle) }}\n                            </div>\n                        </div>\n                    </a>\n                </div>\n                <div class="displayers-settings">\n                    <div class="settings-container">\n                        <div v-for="elem, handle in definition.mapping" v-bind:key="handle">\n                            <div class="displayer-settings" v-show="currentKind == handle">\n                                <div class="field">\n                                    <div class="heading">\n                                        <label class="required">{{ t(\'Displayer\') }}</label>\n                                    </div>\n                                    <div :class="inputClass">\n                                        <div class="select">\n                                            <select v-model="realValue[handle].displayer" @change="updateDisplayer(handle, $event.target.value)">\n                                                <option v-for="displayer, key in elem.displayers" :value="displayer.handle" v-bind:key="key">{{ displayer.name }}</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n                                <component v-for="definition, name in getDisplayer(handle).options.definitions" :name="name" :is="formFieldComponent(definition.field)" :definition="definition" :value="realValue[handle].options[name] ?? null" :errors="getErrors(handle)[name] ?? []" @change="updateOption(handle, name, $event)" :key="name"></component>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </template>\n            <template #errors>\n                <span></span>\n            </template>\n            <template #heading>\n                <span></span>\n            </template>\n            <template #instructions>\n                <span></span>\n            </template>\n            <template #warning>\n                <span></span>\n            </template>\n            <template #tip>\n                <span></span>\n            </template>\n        </form-field>'},v=i(8162),g={data:function(){return{realValue:{},viewModes:{},element:!1}},computed:{inputClass:function(){return"input "+Craft.orientation},...(0,v.rn)(["theme"])},props:{value:String,definition:Object,errors:Array,name:String},created(){this.definition.element&&(this.element=this.definition.element),this.realValue=this.value},mounted(){if(this.definition.element&&this.definition.element.startsWith("from:")){let e=this.definition.element.split(":"),t=$(e[1]).find(e[2]);this.element=t.val(),t.change((()=>{this.element=t.val(),this.fetchViewModes()}))}this.fetchViewModes()},methods:{fetchViewModes(){let e="themes/ajax/view-modes/"+this.theme+"/"+this.definition.layoutType;this.element&&(e+="/"+this.element),axios.post(Craft.getCpUrl(e)).then((e=>{this.viewModes=e.data.viewModes})).catch((e=>{this.handleError(e)}))}},watch:{realValue:{handler:function(){this.$emit("change",this.realValue)},deep:!0}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name">\n            <template v-slot:main>\n                <div :class="inputClass">                    \n                    <div class="select">\n                        <select v-model="realValue">\n                            <option v-for="viewMode in viewModes" :value="viewMode.uid" v-bind:key="viewMode.uid">{{ viewMode.name }}</option>\n                        </select>\n                    </div>\n                </div>\n            </template>\n        </form-field>'};i(2045),i(6486);Craft.HandleGenerator.extend({callback:null,updateTarget:function(){if(this.$target.is(":visible")){var e=this.$source.val();if("undefined"!==typeof e){var t=this.generateTargetValue(e);this.$target.val(t),this.$target.trigger("change"),this.$target.trigger("input"),this.$target.is(":focus")&&Craft.selectFullValue(this.$target),this.callback&&this.callback(t)}}}});const b=Craft.BaseElementSelectInput.extend({theme:null,actionUrl:null,createElementCallback:null,initialIds:[],errors:{},init(e){this.base(e),this.initialIds.length&&Craft.postActionRequest(this.actionUrl,{theme:this.theme,id:this.initialIds},(e=>{let t=[];for(let i of e)t.push(this.createElementCallback(i));this.selectElements2(t),this.updateErrors()}))},setSettings:function(){this.base.apply(this,arguments),this.theme=arguments[0].theme,this.actionUrl=arguments[0].actionUrl,this.createElementCallback=arguments[0].createElementCallback,this.initialIds=arguments[0].initialIds,this.errors=arguments[0].errors},createNewElement:function(e){let t=this.base(e),i=$('<div class="row" style="margin-bottom:5px;display:flex;justify-content:space-between;align-items:center">');return i.append(t),e.viewModes?this.appendViewModes(i,e.viewModes,e.viewMode):this.fetchViewModes(e.id).done((t=>{this.appendViewModes(i,t[0].viewModes,e.viewMode??t[0].viewModes[0].uid),this.trigger("viewModesChanged")})),i},updateErrors:function(){this.$container.find(".element-error").remove();for(let e in this.errors){let t=this.$elements.find(".element[data-id="+e+"]").parent(),i=$('<div class="error element-error">'+this.errors[e]+"</div>");t.find(".select-wrapper").append(i)}},selectElements2:function(e){for(let t=0;t<e.length;t++){let i=e[t],n=this.createNewElement(i);this.appendElement(n),this.addElements(n),i.$element=n}this.onSelectElements(e)},fetchViewModes:function(e){let t={theme:this.theme,id:e};return Craft.postActionRequest(this.actionUrl,t)},appendViewModes:function(e,t,i){let n=$('<div class="select-wrapper"><div class="select"><select><option value="">'+Craft.t("themes","Select a view mode")+"</select></select></div></div>");t.forEach((e=>{n.find("select").append('<option value="'+e.uid+'"'+(e.uid==i?" selected":"")+">"+e.name+"</options>")})),n.find("select").on("change",(()=>{this.trigger("viewModesChanged")})),e.append(n)},getSelectedElementIds:function(){for(var e=[],t=0;t<this.$elements.length;t++)e.push(this.$elements.eq(t).find(".element").data("id"));return e},getSelectedElementData:function(){let e=[];for(var t=0;t<this.$elements.length;t++){let i=this.$elements.eq(t);e.push({id:i.find(".element").data("id"),viewMode:i.find("select").val()})}return e},removeElements:function(e){if(this.settings.selectable&&this.elementSelect.removeItems(e),this.modal){for(var t=[],i=0;i<e.length;i++){var n=e.find(".element").eq(i).data("id");n&&t.push(n)}t.length&&this.modal.elementIndex.enableElementsById(t)}e.children("input").prop("disabled",!0),this.$elements=this.$elements.not(e),this.updateAddElementsBtn(),this.onRemoveElements()},removeElement:function(e){this.removeElements(e.parent()),this.animateElementAway(e.parent(),(()=>{e.parent().remove()}))},initElementSort:function(){this.base(),this.elementSort.settings.ignoreHandleSelector=".delete, .select",this.elementSort.settings.onSortChange=()=>{this.trigger("orderChanged")}}});var y={data:function(){return{realValue:{}}},computed:{inputClass:function(){return"input "+Craft.orientation},mainErrors:function(){let e=[];for(let t in this.errors)"string"==typeof this.errors[t]&&e.push(this.errors[t]);return e},options:function(){switch(this.definition.elementType){case"assets":return{elementType:"craft\\elements\\Asset",id:"field-assets",class:"elementselect",ajaxUrl:"assets-data",elementClass:"element small hasthumb"};case"users":return{elementType:"craft\\elements\\User",id:"field-users",class:"elementselect",ajaxUrl:"users-data",elementClass:"element small hasstatus hasthumb"};case"categories":return{elementType:"craft\\elements\\Category",id:"field-categories",class:"categoriesfield",ajaxUrl:"categories-data",elementClass:"element small hasstatus"};case"entries":return{elementType:"craft\\elements\\Entry",id:"field-entries",class:"elementselect",ajaxUrl:"entries-data",elementClass:"element small hasstatus"};default:return{}}},...(0,v.rn)(["theme"])},props:{value:Object,definition:Object,errors:Array,name:String},created(){this.realValue=this.value,null===this.realValue&&(this.realValue=[])},mounted(){this.createSelector()},methods:{createSelector:function(){this.selector=new b({actionUrl:"themes/cp-ajax/"+this.options.ajaxUrl,id:"field-"+this.name+"-elements",elementType:this.options.elementType,name:"field-"+this.name,sources:"*",viewMode:"small",branchLimit:1,theme:this.theme,selectable:0,createElementCallback:this.createElement,errors:this.getElementsErrors(),initialIds:Object.keys(this.realValue).map((e=>this.realValue[e].id))}),this.selector.on("viewModesChanged",(()=>{this.realValue=this.selector.getSelectedElementData()})),this.selector.on("removeElements",(()=>{this.realValue=this.selector.getSelectedElementData()})),this.selector.on("orderChanged",(()=>{this.realValue=this.selector.getSelectedElementData()}))},createElement:function(e){let t;switch(this.definition.elementType){case"assets":t='<div class="elementthumb">\n                            <img sizes="34px" srcset="'+e.srcset+'" alt="">\n                        </div>\n                        <div class="label">\n                            <span class="title">'+e.title+"</span>\n                        </div>";break;case"users":t='<span class="status '+e.status+'"></span>\n                        <div class="elementthumb rounded">\n                            <img sizes="34px" srcset="'+e.srcset+'" alt="">\n                        </div>\n                        <div class="label">\n                            <span class="title">'+e.name+"</span>\n                        </div>";break;case"categories":t='<span class="status '+e.status+'"></span>\n                        <div class="label">\n                            <span class="title">'+e.title+"</span>\n                        </div>";break;case"entries":t='<span class="status '+e.status+'"></span>\n                        <div class="label">\n                            <span class="title">'+e.title+"</span>\n                        </div>";break}return{$element:$('\n                <div class="'+this.options.elementClass+'"\n                    data-type="'+this.options.elementType+'"\n                    data-id="'+e.id+'"\n                    data-label="'+e.title+'"\n                    title="'+e.title+'"\n                >'+t+"\n                </div>"),id:e.id,viewModes:e.viewModes,viewMode:this.realValue.filter((t=>t.id==e.id))[0].viewMode??null}},getElementsErrors:function(){let e={};for(let t in this.errors){if("string"==typeof this.errors[t])continue;let i=Object.keys(this.errors[t]);e[i[0]]=this.errors[t][i[0]]}return e}},watch:{realValue:{handler:function(){this.$emit("change",this.realValue)},deep:!0},errors:{handler:function(){this.selector&&(this.selector.errors=this.getElementsErrors(),this.selector.updateErrors())},deep:!0}},components:{"form-field":n},emits:["change"],template:'\n        <form-field :errors="errors" :definition="definition" :name="name" :classes="\'select-elements\'">\n            <template v-slot:heading>\n                <div class="heading" v-if="definition.label">\n                    <label :class="{required: definition.required ?? false}">{{ definition.label }}</label>\n                    <label :class="{required: definition.required ?? false}">{{ t(\'View mode\') }}</label>\n                </div>\n            </template>\n            <template v-slot:main>\n                <div :class="inputClass">\n                    <div :id="\'field-\' + name + \'-elements\'" :class="options.class">\n                        <div class="elements">\n                        </div>\n                        <div class="flex">\n                            <button type="button" class="btn add icon dashed">{{ definition.addElementLabel }}</button>\n                        </div>\n                    </div>\n                </div>\n            </template>\n            <template v-slot:errors>\n                <ul class="errors" v-if="mainErrors">\n                    <li class="error" v-for="error, index in mainErrors" v-bind:key="index">\n                        {{ error }}\n                    </li>\n                </ul>\n            </template>\n        </form-field>'};i(6460);window.CraftThemes={formFieldComponents:{lightswitch:a,select:s,text:l,date:r,time:o,color:d,datetime:c,textarea:u,multiselect:m,checkboxes:p,radio:f,filedisplayers:h,fetchviewmode:g,elements:y},fieldComponents:{}}},6460:function(e,t,i){var n=i(4065);n.__esModule&&(n=n.default),"string"===typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);var a=i(4402).Z;a("46a13624",n,!0,{sourceMap:!1,shadowMode:!1})}},t={};function i(n){var a=t[n];if(void 0!==a)return a.exports;var s=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}i.m=e,function(){var e=[];i.O=function(t,n,a,s){if(!n){var l=1/0;for(c=0;c<e.length;c++){n=e[c][0],a=e[c][1],s=e[c][2];for(var r=!0,o=0;o<n.length;o++)(!1&s||l>=s)&&Object.keys(i.O).every((function(e){return i.O[e](n[o])}))?n.splice(o--,1):(r=!1,s<l&&(l=s));if(r){e.splice(c--,1);var d=a();void 0!==d&&(t=d)}}return t}s=s||0;for(var c=e.length;c>0&&e[c-1][2]>s;c--)e[c]=e[c-1];e[c]=[n,a,s]}}(),function(){i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,{a:t}),t}}(),function(){i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}}(),function(){i.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){i.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e}}(),function(){i.j=485}(),function(){var e={485:0};i.O.j=function(t){return 0===e[t]};var t=function(t,n){var a,s,l=n[0],r=n[1],o=n[2],d=0;if(l.some((function(t){return 0!==e[t]}))){for(a in r)i.o(r,a)&&(i.m[a]=r[a]);if(o)var c=o(i)}for(t&&t(n);d<l.length;d++)s=l[d],i.o(e,s)&&e[s]&&e[s][0](),e[s]=0;return i.O(c)},n=self["webpackChunk"]=self["webpackChunk"]||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var n=i.O(void 0,[998],(function(){return i(7718)}));n=i.O(n)})();