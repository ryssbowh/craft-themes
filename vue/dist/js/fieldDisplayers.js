/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"fieldDisplayers": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./vue/src/fieldDisplayers/main.js","chunk-vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./vue/src/fieldDisplayers/main.scss":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--8-oneOf-3-1!./node_modules/postcss-loader/src??ref--8-oneOf-3-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-3-3!./vue/src/fieldDisplayers/main.scss ***!
  \****************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \".displayer-file_default.options-modal .body .content .main {\\n  overflow: hidden;\\n}\\n\\n.displayers-config {\\n  position: relative;\\n  height: calc(100% - 2px);\\n  border-radius: 3px;\\n  border: 1px solid rgba(96, 125, 159, 0.25);\\n  background-clip: padding-box;\\n  overflow: hidden;\\n}\\n.displayers-config:after {\\n  display: block;\\n  position: absolute;\\n  z-index: 1;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  visibility: visible;\\n  content: \\\"\\\";\\n  font-size: 0;\\n  border-radius: 3px;\\n  box-shadow: inset 0 1px 3px -1px #acbed2;\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n  pointer-events: none;\\n}\\n\\n.displayers-settings {\\n  height: 100%;\\n  min-width: 300px;\\n  overflow-y: auto;\\n  padding-left: 200px;\\n  background: #fff;\\n  box-shadow: 0 0 0 1px rgba(31, 41, 51, 0.1), 0 2px 5px -2px rgba(31, 41, 51, 0.2);\\n}\\n.displayers-settings .settings-container {\\n  padding: 15px;\\n}\\n\\n.displayers-sidebar {\\n  position: absolute;\\n  background-color: #f3f7fc;\\n  left: 0;\\n  width: 205px;\\n  height: 100%;\\n  overflow-y: auto;\\n}\\n.displayers-sidebar .heading {\\n  padding: 7px 14px 6px;\\n  border-bottom: 1px solid rgba(51, 64, 77, 0.1);\\n  background-color: #f3f7fc;\\n  background-image: linear-gradient(rgba(51, 64, 77, 0), rgba(51, 64, 77, 0.05));\\n}\\n.displayers-sidebar .kind-item {\\n  display: flex;\\n  justify-content: space-between;\\n  padding: 8px 14px;\\n  border-bottom: solid #cdd8e4;\\n  border-width: 1px 0;\\n  background-color: #e4edf6;\\n}\\n.displayers-sidebar .kind-item.sel {\\n  background-color: #cdd8e4;\\n}\\n.displayers-sidebar .kind-item:last-child {\\n  border-bottom: none;\\n}\\n.displayers-sidebar h4 {\\n  margin-bottom: 5px;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n\n\n//# sourceURL=webpack:///./vue/src/fieldDisplayers/main.scss?./node_modules/css-loader/dist/cjs.js??ref--8-oneOf-3-1!./node_modules/postcss-loader/src??ref--8-oneOf-3-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-3-3");

/***/ }),

/***/ "./vue/src/fieldDisplayers/main.js":
/*!*****************************************!*\
  !*** ./vue/src/fieldDisplayers/main.js ***!
  \*****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.assign.js */ \"./node_modules/core-js/modules/es.object.assign.js\");\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_promise_finally_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.promise.finally.js */ \"./node_modules/core-js/modules/es.promise.finally.js\");\n/* harmony import */ var _home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_promise_finally_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_core_js_modules_es_promise_finally_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _main_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./main.scss */ \"./vue/src/fieldDisplayers/main.scss\");\n/* harmony import */ var _main_scss__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_main_scss__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\nfunction slickOptions() {\n  return \"\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label class=\\\"required\\\">{{ t('Lazy load') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">                    \\n            <div class=\\\"select\\\">\\n                <select v-model=\\\"options.lazyLoad\\\" @input=\\\"$emit('updateOptions', {lazyLoad: $event.target.value})\\\">\\n                    <option value=\\\"ondemand\\\">{{ t('On demand') }}</option>\\n                    <option value=\\\"progressive\\\">{{ t('Progressive') }}</option>\\n                </select>\\n            </div>\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.lazyLoad\\\">\\n            <li v-for=\\\"error in errors.lazyLoad\\\">{{ error }}</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Autoplay') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.autoplay\\\" @change=\\\"$emit('updateOptions', {autoplay: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Autoplay speed') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">\\n            <input type=\\\"number\\\" class=\\\"fullwidth text\\\" @input=\\\"$emit('updateOptions', {autoplaySpeed: $event.target.value})\\\" min=\\\"100\\\" step=\\\"100\\\" :value=\\\"options.autoplaySpeed\\\">\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.autoplaySpeed\\\">\\n            <li v-for=\\\"error in errors.autoplaySpeed\\\">{{ error }}</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Adaptive height') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.adaptiveHeight\\\" @change=\\\"$emit('updateOptions', {adaptiveHeight: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Arrows') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.arrows\\\" @change=\\\"$emit('updateOptions', {arrows: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Dots') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.dots\\\" @change=\\\"$emit('updateOptions', {dots: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Draggable') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.draggable\\\" @change=\\\"$emit('updateOptions', {draggable: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Fade') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.fade\\\" @change=\\\"$emit('updateOptions', {fade: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Infinite') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.infinite\\\" @change=\\\"$emit('updateOptions', {infinite: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Pause on focus') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.pauseOnFocus\\\" @change=\\\"$emit('updateOptions', {pauseOnFocus: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Pause on hover') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.pauseOnHover\\\" @change=\\\"$emit('updateOptions', {pauseOnHover: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Swipe') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.swipe\\\" @change=\\\"$emit('updateOptions', {swipe: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Touch move') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.touchMove\\\" @change=\\\"$emit('updateOptions', {touchMove: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Vertical') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.vertical\\\" @change=\\\"$emit('updateOptions', {vertical: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Vertical swiping') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.verticalSwiping\\\" @change=\\\"$emit('updateOptions', {verticalSwiping: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label>{{ t('Right to left') }}</label>\\n        </div>\\n        <lightswitch :on=\\\"options.rtl\\\" @change=\\\"$emit('updateOptions', {rtl: $event})\\\">\\n        </lightswitch>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label class=\\\"required\\\">{{ t('Slides to show') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">\\n            <input type=\\\"number\\\" class=\\\"fullwidth text\\\" @input=\\\"$emit('updateOptions', {slidesToShow: $event.target.value})\\\" min=\\\"100\\\" step=\\\"100\\\" :value=\\\"options.slidesToShow\\\">\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.slidesToShow\\\">\\n            <li v-for=\\\"error in errors.slidesToShow\\\">{{ error }}</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label class=\\\"required\\\">{{ t('Rows') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">\\n            <input type=\\\"number\\\" class=\\\"fullwidth text\\\" @input=\\\"$emit('updateOptions', {rows: $event.target.value})\\\" min=\\\"100\\\" step=\\\"100\\\" :value=\\\"options.rows\\\">\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.rows\\\">\\n            <li v-for=\\\"error in errors.rows\\\">{{ error }}</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label class=\\\"required\\\">{{ t('Slides per rows') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">\\n            <input type=\\\"number\\\" class=\\\"fullwidth text\\\" @input=\\\"$emit('updateOptions', {slidesPerRow: $event.target.value})\\\" min=\\\"100\\\" step=\\\"100\\\" :value=\\\"options.slidesPerRow\\\">\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.slidesPerRow\\\">\\n            <li v-for=\\\"error in errors.slidesPerRow\\\">{{ error }}</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label class=\\\"required\\\">{{ t('Slides to scroll') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">\\n            <input type=\\\"number\\\" class=\\\"fullwidth text\\\" @input=\\\"$emit('updateOptions', {slidesToScroll: $event.target.value})\\\" min=\\\"100\\\" step=\\\"100\\\" :value=\\\"options.slidesToScroll\\\">\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.slidesToScroll\\\">\\n            <li v-for=\\\"error in errors.slidesToScroll\\\">{{ error }}</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"field\\\">\\n        <div class=\\\"heading\\\">\\n            <label class=\\\"required\\\">{{ t('Animation speed') }}</label>\\n        </div>\\n        <div class=\\\"input ltr\\\">\\n            <input type=\\\"number\\\" class=\\\"fullwidth text\\\" @input=\\\"$emit('updateOptions', {speed: $event.target.value})\\\" min=\\\"100\\\" step=\\\"100\\\" :value=\\\"options.speed\\\">\\n        </div>\\n        <ul class=\\\"errors\\\" v-if=\\\"errors.speed\\\">\\n            <li v-for=\\\"error in errors.speed\\\">{{ error }}</li>\\n        </ul>\\n    </div>\";\n}\n\ndocument.addEventListener(\"register-field-displayers-components\", function (e) {\n  e.detail['file_file'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    methods: {\n      getDisplayer: function getDisplayer(kind) {\n        for (var i in this.displayer.displayersMapping[kind].displayers) {\n          var displayer = Object(lodash__WEBPACK_IMPORTED_MODULE_8__[\"merge\"])({}, this.displayer.displayersMapping[kind].displayers[i]);\n\n          if (this.options.displayers[kind].displayer == displayer.handle) {\n            displayer.options = Object(lodash__WEBPACK_IMPORTED_MODULE_8__[\"merge\"])(displayer.options, this.options.displayers[kind].options);\n            return displayer;\n          }\n        }\n\n        return '';\n      },\n      getDisplayerName: function getDisplayerName(kind) {\n        var displayer = this.getDisplayer(kind);\n        return displayer ? displayer.name : '';\n      },\n      fileDisplayerComponent: function fileDisplayerComponent(kind) {\n        var displayer = this.getDisplayer(kind);\n        return displayer ? 'fileDisplayer-' + displayer.handle : null;\n      },\n      getErrors: function getErrors(kind) {\n        var _this$errors$kind$;\n\n        return this.errors[kind] ? (_this$errors$kind$ = this.errors[kind][0]) !== null && _this$errors$kind$ !== void 0 ? _this$errors$kind$ : {} : {};\n      },\n      hasErrors: function hasErrors(kind) {\n        return Object.keys(this.getErrors(kind)).length != 0;\n      },\n      updateOptions: function updateOptions(kind, options) {\n        this.options.displayers[kind].options = Object(lodash__WEBPACK_IMPORTED_MODULE_8__[\"merge\"])(this.options.displayers[kind].options, options);\n        this.$emit('updateOptions', this.options);\n      },\n      updateDisplayer: function updateDisplayer(kind, displayer) {\n        this.options.displayers[kind] = {\n          displayer: displayer,\n          options: this.getDisplayer(kind).options\n        };\n        this.$emit('updateOptions', this.options);\n      }\n    },\n    data: function data() {\n      return {\n        currentKind: null\n      };\n    },\n    created: function created() {\n      this.currentKind = Object.keys(this.displayer.displayersMapping)[0];\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div class=\\\"displayers-config\\\">\\n            <div class=\\\"displayers-sidebar\\\">\\n                <div class=\\\"heading\\\">\\n                    <h5>{{ t('File Kinds') }}</h5>\\n                </div>\\n                <div :class=\\\"{'kind-item': true, sel: currentKind == handle}\\\" v-for=\\\"elem, handle in displayer.displayersMapping\\\" v-bind:key=\\\"handle\\\" @click.prevent=\\\"currentKind = handle\\\">\\n                    <div class=\\\"name\\\">\\n                        <h4>{{ elem.label }} <span class=\\\"error\\\" data-icon=\\\"alert\\\" aria-label=\\\"Error\\\" v-if=\\\"hasErrors(handle)\\\"></span></h4>\\n                        <div class=\\\"smalltext light code\\\" v-if=\\\"options.displayers[handle].displayer ?? null\\\">\\n                            {{ getDisplayerName(handle) }}\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"displayers-settings\\\">\\n                <div class=\\\"settings-container\\\">\\n                    <div v-for=\\\"elem, handle in displayer.displayersMapping\\\" v-bind:key=\\\"handle\\\">\\n                        <div class=\\\"displayer-settings\\\" v-show=\\\"currentKind == handle\\\">\\n                            <div class=\\\"field\\\">\\n                                <div class=\\\"heading\\\">\\n                                    <label>{{ t('Displayer') }}</label>\\n                                </div>\\n                                <div class=\\\"input ltr\\\">\\n                                    <div class=\\\"select\\\">\\n                                        <select v-model=\\\"options.displayers[handle].displayer\\\" @change=\\\"updateDisplayer(handle, $event.target.value)\\\">\\n                                            <option v-for=\\\"displayer,key in elem.displayers\\\" :value=\\\"displayer.handle\\\" v-bind:key=\\\"key\\\">{{ displayer.name }}</option>\\n                                        </select>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <component :is=\\\"fileDisplayerComponent(handle)\\\" :displayer=\\\"getDisplayer(handle)\\\" :kind=\\\"handle\\\" :errors=\\\"getErrors(handle)\\\" @updateOptions=\\\"updateOptions(handle, $event)\\\"></component>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        \"\n  };\n  e.detail['asset_render_file'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['file_file']);\n  e.detail['entry_rendered'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\" v-for=\\\"elem, typeUid in displayer.viewModes\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('View mode for {type}', {type: elem.type}) }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.viewModes[typeUid]\\\" @change=\\\"$emit('updateOptions', {viewModes: options.viewModes})\\\">\\n                            <option v-for=\\\"label, uid in elem.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors['viewMode-'+typeUid]\\\">\\n                    <li v-for=\\\"error in errors['viewMode-'+typeUid]\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"displayer.viewModes.length == 0\\\">\\n                <div class=\\\"warning with-icon\\\">\\n                    {{ t(\\\"It seems this field doesn't have any valid source\\\") }}\\n                </div>\\n            </div>\\n        </div>\"\n  };\n  e.detail['category_rendered'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('View mode') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.viewModeUid\\\" @input=\\\"$emit('updateOptions', {viewModeUid: $event.target.value})\\\">\\n                            <option v-for=\\\"label, uid in displayer.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.viewModeUid\\\">\\n                    <li v-for=\\\"error in errors.viewModeUid\\\">{{ error }}</li>\\n                </ul>\\n                <div class=\\\"warning with-icon\\\" v-if=\\\"displayer.viewModes.length == 0\\\">\\n                    {{ t(\\\"It seems this field doesn't have any valid source\\\") }}\\n                </div>\\n            </div>\\n        </div>\"\n  };\n  e.detail['tag_rendered'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['category_rendered']);\n  e.detail['user_rendered'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['category_rendered']);\n  e.detail['asset_rendered'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\" v-for=\\\"elem, volumeUid in displayer.viewModes\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('View mode for volume {volume}', {volume: elem.label}) }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.viewModes[volumeUid]\\\" @change=\\\"$emit('updateOptions', {viewModes: options.viewModes})\\\">\\n                            <option v-for=\\\"label, uid in elem.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors['viewMode-'+volumeUid]\\\">\\n                    <li v-for=\\\"error in errors['viewMode-'+volumeUid]\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"displayer.viewModes.length == 0\\\">\\n                <div class=\\\"warning with-icon\\\">\\n                    {{ t(\\\"It seems this field doesn't have any valid source\\\") }}\\n                </div>\\n            </div>\\n        </div>\"\n  };\n  e.detail['url_link'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Label', {}, 'app') }}</label>\\n                </div>\\n                <div class=\\\"instructions\\\">\\n                    <p>{{ t('Leave blank to use the url itself') }}</p>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"text\\\" class=\\\"fullwidth text\\\" :value=\\\"options.label\\\" @input=\\\"$emit('updateOptions', {label: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.label\\\">\\n                    <li v-for=\\\"error in errors.label\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Open in new tab') }}</label>\\n                </div>                    \\n                <lightswitch :on=\\\"options.newTab\\\" @change=\\\"$emit('updateOptions', {newTab: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['redactor_truncated'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"warning with-icon\\\">\\n                {{ t(\\\"Truncated text will always have html stripped out\\\") }}\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Character limit') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"number\\\" class=\\\"fullwidth text\\\" :value=\\\"options.truncated\\\" min=\\\"1\\\" :placeholder=\\\"t('Character limit')\\\" @input=\\\"$emit('updateOptions', {truncated: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.truncated\\\">\\n                    <li v-for=\\\"error in errors.truncated\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Ellipsis') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"text\\\" class=\\\"fullwidth text\\\" :value=\\\"options.ellipsis\\\" @input=\\\"$emit('updateOptions', {ellipsis: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.ellipsis\\\">\\n                    <li v-for=\\\"error in errors.ellipsis\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Link ellipsis to entry') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.linked\\\" @change=\\\"$emit('updateOptions', {linked: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['plain_text_truncated'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['redactor_truncated']);\n  e.detail['redactor_full'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Strip HTML tags') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.stripped\\\" @change=\\\"$emit('updateOptions', {stripped: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['number_default'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Decimals') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"text\\\" class=\\\"fullwidth text\\\" :value=\\\"options.decimals\\\" @input=\\\"$emit('updateOptions', {decimals: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.decimals\\\">\\n                    <li v-for=\\\"error in errors.decimals\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Show prefix') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.showPrefix\\\" @change=\\\"$emit('updateOptions', {showPrefix: $event})\\\">\\n                </lightswitch>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Show suffix') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.showSuffix\\\" @change=\\\"$emit('updateOptions', {showSuffix: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['entry_link'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Label', {}, 'app') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.label\\\" @input=\\\"$emit('updateOptions', {label: $event.target.value})\\\">\\n                            <option value=\\\"title\\\">{{ t('Entry title') }}</option>\\n                            <option value=\\\"custom\\\">{{ t('Custom') }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.label\\\">\\n                    <li v-for=\\\"error in errors.label\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"options.label == 'custom'\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"text\\\" class=\\\"fullwidth text\\\" :value=\\\"options.custom\\\" @input=\\\"$emit('updateOptions', {custom: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.custom\\\">\\n                    <li v-for=\\\"error in errors.custom\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Open in new tab') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.newTab\\\" @change=\\\"$emit('updateOptions', {newTab: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['date_date'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Format') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.format\\\" @input=\\\"$emit('updateOptions', {format: $event.target.value})\\\">\\n                            <option :value=\\\"format\\\" v-for=\\\"label, format in displayer.formats\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.format\\\">\\n                    <li v-for=\\\"error in errors.format\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"options.format == 'custom'\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n                </div>\\n                <div class=\\\"instructions\\\">\\n                    <p><span v-html=\\\"t('View available formats')\\\"></span> <a href=\\\"https://www.php.net/manual/en/datetime.format.php\\\" target=\\\"_blank\\\">{{ t('here') }}</a></p>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"text\\\" class=\\\"fullwidth text\\\" :value=\\\"options.custom\\\" @input=\\\"$emit('updateOptions', {custom: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.custom\\\">\\n                    <li v-for=\\\"error in errors.custom\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n        </div>\"\n  };\n  e.detail['date_datetime'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['date_date']);\n  e.detail['time_time'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['date_date']);\n  e.detail['email_email'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Output as link') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.linked\\\" @change=\\\"$emit('updateOptions', {linked: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['category_label'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Output as links') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.linked\\\" @change=\\\"$emit('updateOptions', {linked: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['author_default'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Display first name') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.firstName\\\" @change=\\\"$emit('updateOptions', {firstName: $event})\\\">\\n                </lightswitch>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Display last name') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.lastName\\\" @change=\\\"$emit('updateOptions', {lastName: $event})\\\">\\n                </lightswitch>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Display email') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.email\\\" @change=\\\"$emit('updateOptions', {email: $event})\\\">\\n                </lightswitch>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Link email') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.linkEmail\\\" @change=\\\"$emit('updateOptions', {linkEmail: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['user-info_default'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['author_default']);\n  e.detail['user_default'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['author_default']);\n  e.detail['asset_link'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Label', {}, 'app') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.label\\\" @input=\\\"$emit('updateOptions', {label: $event.target.value})\\\">\\n                            <option value=\\\"title\\\">{{ t('Asset title') }}</option>\\n                            <option value=\\\"filename\\\">{{ t('File name') }}</option>\\n                            <option value=\\\"custom\\\">{{ t('Custom') }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.label\\\">\\n                    <li v-for=\\\"error in errors.label\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"options.label == 'custom'\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Custom') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">\\n                    <input type=\\\"text\\\" class=\\\"fullwidth text\\\" :value=\\\"options.custom\\\" @input=\\\"$emit('updateOptions', {custom: $event.target.value})\\\">\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.custom\\\">\\n                    <li v-for=\\\"error in errors.custom\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Open in new tab') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.newTab\\\" @change=\\\"$emit('updateOptions', {newTab: $event})\\\">\\n                </lightswitch>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Download link') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.download\\\" @change=\\\"$emit('updateOptions', {download: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['title_title'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Tag') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.tag\\\" @input=\\\"$emit('updateOptions', {tag: $event.target.value})\\\">\\n                            <option value=\\\"h1\\\">H1</option>\\n                            <option value=\\\"h2\\\">H2</option>\\n                            <option value=\\\"h3\\\">H3</option>\\n                            <option value=\\\"h4\\\">H4</option>\\n                            <option value=\\\"h5\\\">H5</option>\\n                            <option value=\\\"h6\\\">H6</option>\\n                            <option value=\\\"p\\\">p</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.tag\\\">\\n                    <li v-for=\\\"error in errors.tag\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Link to Element') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.linked\\\" @change=\\\"$emit('updateOptions', {linked: $event})\\\">\\n                </lightswitch>\\n            </div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label>{{ t('Open in new tab') }}</label>\\n                </div>\\n                <lightswitch :on=\\\"options.newTab\\\" @change=\\\"$emit('updateOptions', {newTab: $event})\\\">\\n                </lightswitch>\\n            </div>\\n        </div>\"\n  };\n  e.detail['tag-title_title'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('Tag') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.tag\\\" @input=\\\"$emit('updateOptions', {tag: $event.target.value})\\\">\\n                            <option value=\\\"h1\\\">H1</option>\\n                            <option value=\\\"h2\\\">H2</option>\\n                            <option value=\\\"h3\\\">H3</option>\\n                            <option value=\\\"h4\\\">H4</option>\\n                            <option value=\\\"h5\\\">H5</option>\\n                            <option value=\\\"h6\\\">H6</option>\\n                            <option value=\\\"p\\\">p</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.tag\\\">\\n                    <li v-for=\\\"error in errors.tag\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n        </div>\"\n  };\n  e.detail['asset_slick'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\" v-for=\\\"elem, volumeUid in displayer.viewModes\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('View mode for volume {volume}', {volume: elem.label}) }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.viewModes[volumeUid]\\\" @change=\\\"$emit('updateOptions', {viewModes: options.viewModes})\\\">\\n                            <option v-for=\\\"label, uid in elem.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors['viewMode-'+volumeUid]\\\">\\n                    <li v-for=\\\"error in errors['viewMode-'+volumeUid]\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"displayer.viewModes.length == 0\\\">\\n                <div class=\\\"warning with-icon\\\">\\n                    {{ t(\\\"It seems this field doesn't have any valid source\\\") }}\\n                </div>\\n            </div> \" + slickOptions() + \"\\n        </div>\"\n  };\n  e.detail['category_slick'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('View mode') }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.viewModeUid\\\" @input=\\\"$emit('updateOptions', {viewModeUid: $event.target.value})\\\">\\n                            <option v-for=\\\"label, uid in displayer.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors.viewModeUid\\\">\\n                    <li v-for=\\\"error in errors.viewModeUid\\\">{{ error }}</li>\\n                </ul>\\n                <div class=\\\"warning with-icon\\\" v-if=\\\"displayer.viewModes.length == 0\\\">\\n                    {{ t(\\\"It seems this field doesn't have any valid source\\\") }}\\n                </div>\\n            </div> \" + slickOptions() + \"\\n        </div>\"\n  };\n  e.detail['matrix_slick'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            \" + slickOptions() + \"\\n        </div>\"\n  };\n  e.detail['entry_slick'] = {\n    props: {\n      displayer: Object,\n      options: Object,\n      errors: Object\n    },\n    emits: ['updateOptions'],\n    template: \"\\n        <div>\\n            <div class=\\\"field\\\" v-for=\\\"elem, typeUid in displayer.viewModes\\\">\\n                <div class=\\\"heading\\\">\\n                    <label class=\\\"required\\\">{{ t('View mode for {type}', {type: elem.type}) }}</label>\\n                </div>\\n                <div class=\\\"input ltr\\\">                    \\n                    <div class=\\\"select\\\">\\n                        <select v-model=\\\"options.viewModes[typeUid]\\\" @change=\\\"$emit('updateOptions', {viewModes: options.viewModes})\\\">\\n                            <option v-for=\\\"label, uid in elem.viewModes\\\" :value=\\\"uid\\\">{{ label }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <ul class=\\\"errors\\\" v-if=\\\"errors['viewMode-'+typeUid]\\\">\\n                    <li v-for=\\\"error in errors['viewMode-'+typeUid]\\\">{{ error }}</li>\\n                </ul>\\n            </div>\\n            <div class=\\\"field\\\" v-if=\\\"displayer.viewModes.length == 0\\\">\\n                <div class=\\\"warning with-icon\\\">\\n                    {{ t(\\\"It seems this field doesn't have any valid source\\\") }}\\n                </div>\\n            </div> \" + slickOptions() + \"\\n        </div>\"\n  };\n  e.detail['tag_slick'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['category_slick']);\n  e.detail['user_slick'] = Object(_home_bobo_Web_puzzlers_sites_craft35_plugins_craft_themes_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, e.detail['category_slick']);\n});\n\n//# sourceURL=webpack:///./vue/src/fieldDisplayers/main.js?");

/***/ }),

/***/ "./vue/src/fieldDisplayers/main.scss":
/*!*******************************************!*\
  !*** ./vue/src/fieldDisplayers/main.scss ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-3-1!../../../node_modules/postcss-loader/src??ref--8-oneOf-3-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-3-3!./main.scss */ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./vue/src/fieldDisplayers/main.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../../node_modules/vue-style-loader/lib/addStylesClient.js */ \"./node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5bbed450\", content, false, {\"sourceMap\":false,\"shadowMode\":false});\n// Hot Module Replacement\nif(false) {}\n\n//# sourceURL=webpack:///./vue/src/fieldDisplayers/main.scss?");

/***/ })

/******/ });